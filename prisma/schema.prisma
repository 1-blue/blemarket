// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum KINDS {
  Favorite
  Sale
  Purchase
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  phone     String?  @unique
  email     String?  @unique
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tokens          Token[]
  products        Product[]
  posts           Post[]
  answers         Answer[]
  recommendations Recommendation[]
  writtenReviews  Review[]         @relation(name: "writtenReviews")
  receivedReviews Review[]         @relation(name: "receivedReviews")
  records         Record[]
  streams         Stream[]
  messages        Message[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(30)
  price       Int
  description String   @db.MediumText
  image       String
  keywords    String   @db.VarChar(40)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  records Record[]

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Post {
  id        Int      @id @default(autoincrement())
  question  String   @db.MediumText
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answers         Answer[]
  recommendations Recommendation[]

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answer    String   @db.MediumText

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Recommendation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Review {
  id        Int      @id @default(autoincrement())
  review    String   @db.MediumText
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy    User @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
}

model Record {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  kinds KINDS

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Stream {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(40)
  description String   @db.MediumText
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  messages Message[]

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  streamId Int
  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
}

// 추후에 구현할 것
// Product : Keyword ( N : M )
// Product : Hashtag ( N : M )
